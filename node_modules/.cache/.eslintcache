[{"E:\\GIT\\Projects\\Calculator\\src\\index.js":"1","E:\\GIT\\Projects\\Calculator\\src\\App.js":"2","E:\\GIT\\Projects\\Calculator\\src\\reportWebVitals.js":"3","E:\\GIT\\Projects\\Calculator\\src\\Buttons.js":"4"},{"size":500,"mtime":499162500000,"results":"5","hashOfConfig":"6"},{"size":4745,"mtime":1621829668320,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"6"},{"size":543,"mtime":1621591415778,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"9ft56v",{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\GIT\\Projects\\Calculator\\src\\index.js",[],"E:\\GIT\\Projects\\Calculator\\src\\App.js",["19"],"import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Buttons from \"./Buttons\";\n\nfunction App() {\n  const initialState = {\n    prevNumber: \"\",\n    currNumber: \"0\",\n    operations: \"\",\n    isComplete: false,\n    expression: \"\",\n  };\n  const [state, setstate] = useState(initialState);\n\n  const numbers = [\n    { id: \"seven\", value: 7 },\n    { id: \"eight\", value: 8 },\n    { id: \"nine\", value: 9 },\n    { id: \"delete\", value: \"DEL\" },\n    { id: \"four\", value: 4 },\n    { id: \"five\", value: 5 },\n    { id: \"six\", value: 6 },\n    { id: \"add\", value: \"+\" },\n    { id: \"one\", value: 1 },\n    { id: \"two\", value: 2 },\n    { id: \"three\", value: 3 },\n    { id: \"subtract\", value: \"-\" },\n    { id: \"zero\", value: 0 },\n    { id: \"decimal\", value: \".\" },\n    { id: \"divide\", value: \"/\" },\n    { id: \"multiply\", value: \"*\" },\n    { id: \"equals\", value: \"=\" },\n    { id: \"clear\", value: \"AC\" },\n  ];\n\n  const handleClick = (e) => {\n    const btnValue = e.target.dataset.value;\n    let newNumber = \"\";\n\n    if (state.isComplete) {\n      setstate((prevState) => {\n        return { ...prevState, currNumber: \"\" };\n      });\n    }\n\n    if (!isNaN(Number(btnValue))) {\n      setstate((prevState) => {\n        let newExp = \"\";\n        \n        // Checking the Last operations is EQUALS\n        if (lastOperandEquals(prevState)) {\n          newExp = \"\";\n        } else {\n          newExp = prevState.expression;\n        }\n\n        if (\n          prevState.currNumber.length === 1 &&\n          prevState.currNumber[0] === \"0\"\n        ) {\n          newNumber = btnValue;\n        } else {\n          newNumber = prevState.currNumber + btnValue;\n        }\n\n        return {\n          ...prevState,\n          currNumber: newNumber,\n          prevNumber: btnValue,\n          isComplete: false,\n          expression: newExp,\n        };\n      });\n    }\n\n    if (btnValue === \".\" && !state.currNumber.split(\"\").includes(btnValue)) {\n      setstate((prevState) => {\n        return {\n          ...prevState,\n          currNumber: prevState.currNumber + btnValue,\n        };\n      });\n    }\n    if (btnValue === \"AC\") {\n      setstate((prevState) => {\n        return {\n          ...prevState,\n          currNumber: \"0\",\n          prevNumber: \"\",\n          isComplete: true,\n          expression: \"\",\n        };\n      });\n    }\n\n    // OPERATIONS\n    if ([\"+\", \"-\", \"*\", \"/\"].includes(btnValue)) {\n      setstate((prev) => {\n        let newExp = \"\";\n        let operands = \"\";\n\n        if (lastOperandEquals(prev)) {\n          newExp = prev.currNumber;\n        } else {\n          newExp = prev.expression;\n        }\n\n        if ([\"+\", \"-\", \"*\", \"/\"].includes(prev.prevNumber)) {\n          const isOperands = (el) => [\"+\", \"-\", \"*\", \"/\"].includes(el);\n\n          let operandsAlone = prev.expression\n            .replace(/\\s/g, \"\")\n            .slice(-2)\n            .split(\"\");\n\n          if (operandsAlone.every(isOperands)) {\n            console.log(`operandsAlone is True`, operandsAlone);\n\n            let newOperand = prev.expression\n              .trim()\n              .split(\"\")\n              .filter((el) => {\n                return ![\"+\", \"-\", \"*\", \"/\"].includes(el) && /\\S/.test(el);\n              });\n            console.log(`newOperans`, newOperand);\n            newExp = newOperand.join(\"\");\n\n            console.log(`newOperans`, newExp);\n          }\n\n          operands = operands + prev.prevNumber;\n          console.log(`operands`, operands);\n        } else {\n          operands = btnValue;\n        }\n\n        let expression = \"\";\n\n        expression =\n          prev.expression.length === 0\n            ? `${state.currNumber} ${btnValue}`\n            : `${newExp} ${state.currNumber} ${btnValue}`;\n\n        return {\n          ...prev,\n          currNumber: \"\",\n          expression: expression,\n          prevNumber: operands,\n        };\n      });\n    }\n\n    // OUTPUT WHEN EQUALS\n    if (btnValue === \"=\") {\n      let newExp = `${state.expression} ${state.currNumber}`;\n      let calc = eval(newExp).toFixed(4);\n\n      setstate((prev) => {\n        return {\n          ...prev,\n          expression: newExp + btnValue,\n          currNumber: +calc,\n          isComplete: true,\n        };\n      });\n    }\n    console.log(`state`, state);\n  };\n\n  const lastOperandEquals = (obj) =>\n    obj.isComplete && obj.expression.slice(-1) === \"=\";\n\n  return (\n    <div className=\"section-center\">\n      <div className=\"expression\">{state.expression}</div>\n      <div className=\"displayCalc\" id=\"display\">\n        {state.currNumber}\n      </div>\n      <div className=\"container\">\n        {numbers.map((item, index) => {\n          return <Buttons key={index} item={item} handleClick={handleClick} />;\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","E:\\GIT\\Projects\\Calculator\\src\\reportWebVitals.js",[],"E:\\GIT\\Projects\\Calculator\\src\\Buttons.js",[],{"ruleId":"20","severity":1,"message":"21","line":156,"column":18,"nodeType":"22","messageId":"23","endLine":156,"endColumn":22},"no-eval","eval can be harmful.","CallExpression","unexpected"]