{"ast":null,"code":"var _jsxFileName = \"E:\\\\GIT\\\\Projects\\\\Calculator\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport Buttons from \"./Buttons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const initialState = {\n    prevNumber: \"\",\n    currNumber: \"0\",\n    operations: \"\",\n    isComplete: false,\n    expression: \"\"\n  };\n  const [state, setstate] = useState(initialState);\n  const numbers = [{\n    id: \"seven\",\n    value: 7\n  }, {\n    id: \"eight\",\n    value: 8\n  }, {\n    id: \"nine\",\n    value: 9\n  }, {\n    id: \"delete\",\n    value: \"DEL\"\n  }, {\n    id: \"four\",\n    value: 4\n  }, {\n    id: \"five\",\n    value: 5\n  }, {\n    id: \"six\",\n    value: 6\n  }, {\n    id: \"add\",\n    value: \"+\"\n  }, {\n    id: \"one\",\n    value: 1\n  }, {\n    id: \"two\",\n    value: 2\n  }, {\n    id: \"three\",\n    value: 3\n  }, {\n    id: \"subtract\",\n    value: \"-\"\n  }, {\n    id: \"zero\",\n    value: 0\n  }, {\n    id: \"decimal\",\n    value: \".\"\n  }, {\n    id: \"divide\",\n    value: \"/\"\n  }, {\n    id: \"multiply\",\n    value: \"*\"\n  }, {\n    id: \"equals\",\n    value: \"=\"\n  }, {\n    id: \"clear\",\n    value: \"AC\"\n  }];\n\n  const handleClick = e => {\n    const btnValue = e.target.dataset.value;\n    let newNumber = \"\";\n\n    if (state.isComplete) {\n      setstate(prevState => {\n        return { ...prevState,\n          currNumber: \"\"\n        };\n      });\n    }\n\n    if (!isNaN(Number(btnValue))) {\n      setstate(prevState => {\n        let newExp = \"\"; // Checking the Last operations is EQUALS\n\n        if (lastOperandEquals(prevState)) {\n          newExp = \"\";\n        } else {\n          newExp = prevState.expression;\n        }\n\n        if (prevState.currNumber.length === 1 && prevState.currNumber[0] === \"0\") {\n          newNumber = btnValue;\n        } else {\n          newNumber = prevState.currNumber + btnValue;\n        }\n\n        return { ...prevState,\n          currNumber: newNumber,\n          prevNumber: btnValue,\n          isComplete: false,\n          expression: newExp\n        };\n      });\n    }\n\n    if (btnValue === \".\" && !state.currNumber.split(\"\").includes(btnValue)) {\n      setstate(prevState => {\n        return { ...prevState,\n          currNumber: prevState.currNumber + btnValue\n        };\n      });\n    }\n\n    if (btnValue === \"AC\") {\n      setstate(prevState => {\n        return { ...prevState,\n          currNumber: \"0\",\n          prevNumber: \"\",\n          isComplete: true,\n          expression: \"\"\n        };\n      });\n    } // OPERATIONS\n\n\n    if ([\"+\", \"-\", \"*\", \"/\"].includes(btnValue)) {\n      setstate(prev => {\n        let newExp = \"\";\n        let operands = \"\";\n\n        if (lastOperandEquals(prev)) {\n          newExp = prev.currNumber;\n        } else {\n          newExp = prev.expression;\n        }\n\n        if ([\"+\", \"-\", \"*\", \"/\"].includes(prev.prevNumber)) {\n          const isOperands = el => [\"+\", \"-\", \"*\", \"/\"].includes(el);\n\n          let operandsAlone = prev.expression.replace(/\\s/g, \"\").slice(-2).split(\"\");\n\n          if (operandsAlone.every(isOperands)) {\n            console.log(`operandsAlone is True`, operandsAlone);\n            let newOperand = prev.expression.trim().split(\"\").filter(el => {\n              return ![\"+\", \"-\", \"*\", \"/\"].includes(el) && /\\S/.test(el);\n            });\n            console.log(`newOperans`, newOperand);\n            newExp = newOperand.join(\"\");\n            console.log(`newOperans`, newExp);\n          }\n\n          operands = operands + prev.prevNumber;\n          console.log(`operands`, operands);\n        } else {\n          operands = btnValue;\n        }\n\n        let expression = \"\";\n        expression = prev.expression.length === 0 ? `${state.currNumber} ${btnValue}` : `${newExp} ${state.currNumber} ${btnValue}`;\n        return { ...prev,\n          currNumber: \"\",\n          expression: expression,\n          prevNumber: operands\n        };\n      });\n    } // OUTPUT WHEN EQUALS\n\n\n    if (btnValue === \"=\") {\n      let newExp = `${state.expression} ${state.currNumber}`;\n      let calc = eval(newExp).toFixed(4);\n      setstate(prev => {\n        return { ...prev,\n          expression: newExp + btnValue,\n          currNumber: +calc,\n          isComplete: true\n        };\n      });\n    }\n\n    console.log(`state`, state);\n  };\n\n  const lastOperandEquals = obj => obj.isComplete && obj.expression.slice(-1) === \"=\";\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"section-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"expression\",\n      children: state.expression\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"displayCalc\",\n      id: \"display\",\n      children: state.currNumber\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: numbers.map((item, index) => {\n        return /*#__PURE__*/_jsxDEV(Buttons, {\n          item: item,\n          handleClick: handleClick\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"5Fz4fLNbOMXEXz9GeabMB/u87vA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["E:/GIT/Projects/Calculator/src/App.js"],"names":["React","useState","Buttons","App","initialState","prevNumber","currNumber","operations","isComplete","expression","state","setstate","numbers","id","value","handleClick","e","btnValue","target","dataset","newNumber","prevState","isNaN","Number","newExp","lastOperandEquals","length","split","includes","prev","operands","isOperands","el","operandsAlone","replace","slice","every","console","log","newOperand","trim","filter","test","join","calc","eval","toFixed","obj","map","item","index"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Buttons from \"./Buttons\";\n\nfunction App() {\n  const initialState = {\n    prevNumber: \"\",\n    currNumber: \"0\",\n    operations: \"\",\n    isComplete: false,\n    expression: \"\",\n  };\n  const [state, setstate] = useState(initialState);\n\n  const numbers = [\n    { id: \"seven\", value: 7 },\n    { id: \"eight\", value: 8 },\n    { id: \"nine\", value: 9 },\n    { id: \"delete\", value: \"DEL\" },\n    { id: \"four\", value: 4 },\n    { id: \"five\", value: 5 },\n    { id: \"six\", value: 6 },\n    { id: \"add\", value: \"+\" },\n    { id: \"one\", value: 1 },\n    { id: \"two\", value: 2 },\n    { id: \"three\", value: 3 },\n    { id: \"subtract\", value: \"-\" },\n    { id: \"zero\", value: 0 },\n    { id: \"decimal\", value: \".\" },\n    { id: \"divide\", value: \"/\" },\n    { id: \"multiply\", value: \"*\" },\n    { id: \"equals\", value: \"=\" },\n    { id: \"clear\", value: \"AC\" },\n  ];\n\n  const handleClick = (e) => {\n    const btnValue = e.target.dataset.value;\n    let newNumber = \"\";\n\n    if (state.isComplete) {\n      setstate((prevState) => {\n        return { ...prevState, currNumber: \"\" };\n      });\n    }\n\n    if (!isNaN(Number(btnValue))) {\n      setstate((prevState) => {\n        let newExp = \"\";\n        \n        // Checking the Last operations is EQUALS\n        if (lastOperandEquals(prevState)) {\n          newExp = \"\";\n        } else {\n          newExp = prevState.expression;\n        }\n\n        if (\n          prevState.currNumber.length === 1 &&\n          prevState.currNumber[0] === \"0\"\n        ) {\n          newNumber = btnValue;\n        } else {\n          newNumber = prevState.currNumber + btnValue;\n        }\n\n        return {\n          ...prevState,\n          currNumber: newNumber,\n          prevNumber: btnValue,\n          isComplete: false,\n          expression: newExp,\n        };\n      });\n    }\n\n    if (btnValue === \".\" && !state.currNumber.split(\"\").includes(btnValue)) {\n      setstate((prevState) => {\n        return {\n          ...prevState,\n          currNumber: prevState.currNumber + btnValue,\n        };\n      });\n    }\n    if (btnValue === \"AC\") {\n      setstate((prevState) => {\n        return {\n          ...prevState,\n          currNumber: \"0\",\n          prevNumber: \"\",\n          isComplete: true,\n          expression: \"\",\n        };\n      });\n    }\n\n    // OPERATIONS\n    if ([\"+\", \"-\", \"*\", \"/\"].includes(btnValue)) {\n      setstate((prev) => {\n        let newExp = \"\";\n        let operands = \"\";\n\n        if (lastOperandEquals(prev)) {\n          newExp = prev.currNumber;\n        } else {\n          newExp = prev.expression;\n        }\n\n        if ([\"+\", \"-\", \"*\", \"/\"].includes(prev.prevNumber)) {\n          const isOperands = (el) => [\"+\", \"-\", \"*\", \"/\"].includes(el);\n\n          let operandsAlone = prev.expression\n            .replace(/\\s/g, \"\")\n            .slice(-2)\n            .split(\"\");\n\n          if (operandsAlone.every(isOperands)) {\n            console.log(`operandsAlone is True`, operandsAlone);\n\n            let newOperand = prev.expression\n              .trim()\n              .split(\"\")\n              .filter((el) => {\n                return ![\"+\", \"-\", \"*\", \"/\"].includes(el) && /\\S/.test(el);\n              });\n            console.log(`newOperans`, newOperand);\n            newExp = newOperand.join(\"\");\n\n            console.log(`newOperans`, newExp);\n          }\n\n          operands = operands + prev.prevNumber;\n          console.log(`operands`, operands);\n        } else {\n          operands = btnValue;\n        }\n\n        let expression = \"\";\n\n        expression =\n          prev.expression.length === 0\n            ? `${state.currNumber} ${btnValue}`\n            : `${newExp} ${state.currNumber} ${btnValue}`;\n\n        return {\n          ...prev,\n          currNumber: \"\",\n          expression: expression,\n          prevNumber: operands,\n        };\n      });\n    }\n\n    // OUTPUT WHEN EQUALS\n    if (btnValue === \"=\") {\n      let newExp = `${state.expression} ${state.currNumber}`;\n      let calc = eval(newExp).toFixed(4);\n\n      setstate((prev) => {\n        return {\n          ...prev,\n          expression: newExp + btnValue,\n          currNumber: +calc,\n          isComplete: true,\n        };\n      });\n    }\n    console.log(`state`, state);\n  };\n\n  const lastOperandEquals = (obj) =>\n    obj.isComplete && obj.expression.slice(-1) === \"=\";\n\n  return (\n    <div className=\"section-center\">\n      <div className=\"expression\">{state.expression}</div>\n      <div className=\"displayCalc\" id=\"display\">\n        {state.currNumber}\n      </div>\n      <div className=\"container\">\n        {numbers.map((item, index) => {\n          return <Buttons key={index} item={item} handleClick={handleClick} />;\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}